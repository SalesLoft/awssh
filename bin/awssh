#! /usr/bin/env ruby
gem "aws-sdk", "~> 2"
require "aws-sdk"
require "delegate"

module Environment
  def self.required(var)
    value = ENV.fetch(var.to_s) { abort "Missing require environment variable #{var}" }
    const_set(var, value)
  end

  required :AWSSH_USERNAME
  required :AWSSH_BASTION_HOST
  required :AWSSH_ACCESS_KEY_ID
  AWSSH_SECRET_ACCESS_KEY = ENV["AWSSH_SECRET_ACCESS_KEY"] || `security find-generic-password -wa aws_jump_user_secret_key`.strip
end

class Instance < SimpleDelegator
  def self.wrap(list)
    list.map(&method(:new))
  end

  def full_name
    [tag("opsworks:stack"), tag("opsworks:instance")].join("/")
  end

  def tag(name)
    tags.find { |t| t.key == name }.value
  end
end

class Shell
  def ssh_command(instance, command=nil)
    if instance.public_ip_address
      ssh(instance.public_ip_address, command)
    elsif instance.private_ip_address
      ssh(Environment::AWSSH_BASTION_HOST, ssh(instance.private_ip_address, command))
    else
      abort "No public or private IP available for #{instance.full_name}"
    end
  end

  def ssh(host, command=nil)
    "ssh -tt -A #{Environment::AWSSH_USERNAME}@#{host} #{command}"
  end
end

class Client
  def instance(name)
    stack, name = name.split("/")
    instances("tag:opsworks:stack" => stack, "tag:opsworks:instance" => name).first
  end

  def instances(filters)
    filters = filters.map { |k, v| {name: k, values: Array(v)} }
    Instance.wrap(client.describe_instances(filters: filters).reservations.flat_map(&:instances))
  end

  def client
    @client ||= Aws::EC2::Client.new(
      region: "us-east-1",
      access_key_id: Environment::AWSSH_ACCESS_KEY_ID,
      secret_access_key: Environment::AWSSH_SECRET_ACCESS_KEY
    )
  end
end

abort "Usage: awssh stack/instance" if ARGV.empty?
host, *args = ARGV

if host == "--list"
  puts Client.new.instances("tag-key" => "opsworks:instance").map(&:full_name).sort
else
  instance = Client.new.instance(host)
  abort "Cannot find #{host}" unless instance
  exec Shell.new.ssh_command(instance, args.join(" "))
end
